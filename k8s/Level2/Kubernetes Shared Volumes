We are working on an application that will be deployed on multiple containers within a pod on Kubernetes cluster. There is a requirement to share a volume among the containers to save some temporary data. The Nautilus DevOps team is developing a similar template to replicate the scenario.
Below you can find more details about it.
Create a pod named volume-share-datacenter.

For the first container, use image ubuntu with latest tag only and remember to mention the tag i.e ubuntu:latest, container should be named as volume-container-datacenter-1, and run a sleep command for it so that it remains in running state.
Volume volume-share should be mounted at path /tmp/news.

For the second container, use image ubuntu with the latest tag only and remember to mention the tag i.e ubuntu:latest, container should be named as volume-container-datacenter-2, and again run a sleep command for it so that it remains in running state.
Volume volume-share should be mounted at path /tmp/demo.

Volume name should be volume-share of type emptyDir.

After creating the pod, exec into the first container i.e volume-container-datacenter-1, and just for testing create a file news.txt with any content under
the mounted path of first container i.e /tmp/news.

The file news.txt should be present under the mounted path /tmp/demo on the second container volume-container-datacenter-2 as well, since they are using a shared volume.
Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Ans:- 

 I can help you with that. Below is the YAML configuration for the pod named volume-share-datacenter with the specified requirements:
apiVersion: v1
kind: Pod
metadata:
  name: volume-share-datacenter
spec:
  containers:
  - name: volume-container-datacenter-1
    image: ubuntu:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - mountPath: /tmp/news
      name: volume-share
  - name: volume-container-datacenter-2
    image: ubuntu:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - mountPath: /tmp/demo
      name: volume-share
  volumes:
  - name: volume-share
    emptyDir: {}

To create the pod, save the above configuration to a file named volume-share-datacenter.yaml and apply it using kubectl:

kubectl apply -f volume-share-datacenter.yaml

After the pod is created, you can exec into the first container and create the file news.txt:


kubectl exec -it volume-share-datacenter -c volume-container-datacenter-1 -- bash


echo "This is a test file." > /tmp/news/news.txt

exit

Then, you can check the second container to ensure the file is present:

kubectl exec -it volume-share-datacenter -c volume-container-datacenter-2 -- bash


cat /tmp/demo/news.txt


This should display the content of news.txt, confirming that the shared volume is working correctly.
