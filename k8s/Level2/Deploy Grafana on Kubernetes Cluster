The Nautilus DevOps teams is planning to set up a Grafana tool to collect and analyze analytics from some applications. They are planning to deploy it on Kubernetes cluster. 
Below you can find more details.
1.) Create a deployment named grafana-deployment-nautilus using any grafana image for Grafana app. Set other parameters as per your choice.

2.) Create NodePort type service with nodePort 32000 to expose the app.

You need not to make any configuration changes inside the Grafana app once deployed, just make sure you are able to access the Grafana login page.

Note: The kubectl on jump_host has been configured to work with kubernetes cluster.

Ans:-

I can help you with that! Here are the steps to create a Grafana deployment and expose it using a NodePort service on your Kubernetes cluster:

Step 1: Create the Deployment
Create a YAML file named grafana-deployment.yaml with the following content:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment-nautilus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000

Apply the deployment using kubectl:
kubectl apply -f grafana-deployment.yaml

Step 2: Create the NodePort Service
Create a YAML file named grafana-service.yaml with the following content:

apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 32000
Apply the service using kubectl:

kubectl apply -f grafana-service.yaml

Accessing Grafana

Once the deployment and service are created, you should be able to access the Grafana login page by navigating to http://<NodeIP>:32000 in your web browser.
