The Nautilus DevOps team is working to deploy some tools in Kubernetes cluster. Some of the tools are licence based so that licence information needs to be stored securely within Kubernetes cluster. Therefore, the team wants to utilize Kubernetes secrets to store those secrets. 
Below you can find more details about the requirements:
We already have a secret key file ecommerce.txt under /opt location on jump host. Create a generic secret named ecommerce, it should contain the password/license-number present in
ecommerce.txt file.
Also create a pod named secret-devops.

Configure pod's spec as container name should be secret-container-devops, image should be debian preferably with latest tag (remember to mention the tag with image). Use sleep command for container so that it remains in running state. Consume the created secret and mount 
it under /opt/apps within the container.

To verify you can exec into the container secret-container-devops, to check the secret key under the mounted path /opt/apps. Before hitting the Check button please make sure pod/pods are in running state, also validation can take some time
to complete so keep patience.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Solutions:- 

Create the Kubernetes Secret: First, create a generic secret named ecommerce using the ecommerce.txt file located at /opt on the jump host. You can use the following command:

kubectl create secret generic ecommerce --from-file=/opt/ecommerce.txt

Create the Pod: Next, create a pod named secret-devops with the specified container configuration. You can use the following YAML configuration to achieve this:

apiVersion: v1
kind: Pod
metadata:
  name: secret-devops
spec:
  containers:
  - name: secret-container-devops
    image: debian:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: secret-volume
      mountPath: /opt/apps
  volumes:
  - name: secret-volume
    secret:
      secretName: ecommerce
===============================================

Save this configuration to a file named pod-secret-devops.yaml and apply it using:

kubectl apply -f pod-secret-devops.yaml

kubectl apply -f pod-secret-devops.yaml

Verify the Secret in the Pod: To verify that the secret has been mounted correctly, exec into the container and check the contents under /opt/apps:

kubectl exec -it secret-devops -- /bin/bash

ls /opt/apps

cat /opt/apps/ecommerce.txt

Make sure the pod is in a running state before verifying.

