There are a number of parameters that are used by the applications. We need to define these as environment variables, so that we can use them as needed within different configs. Below is a scenario which needs to be configured on Kubernetes cluster. 
Please find below more details about the same.
Create a pod named envars.

Container name should be fieldref-container, use image redis preferable latest tag, use command 'sh', '-c' and args should be

'while true; do
      echo -en '/n';
                                  printenv NODE_NAME POD_NAME;
                                  printenv POD_IP POD_SERVICE_ACCOUNT;
              sleep 10;
         done;'

(Note: please take care of indentations)


Define Four environment variables as mentioned below:
a.) The first env should be named as NODE_NAME, set valueFrom fieldref and fieldPath should be spec.nodeName.

b.) The second env should be named as POD_NAME, set valueFrom fieldref and fieldPath should be metadata.name.

c.) The third env should be named as POD_IP, set valueFrom fieldref and fieldPath should be status.podIP.

d.) The fourth env should be named as POD_SERVICE_ACCOUNT, set valueFrom fieldref and fieldPath shoulbe be spec.serviceAccountName.

Set restart policy to Never.

To check the output, exec into the pod and use printenv command.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Solutions.

To complete the task of creating a Kubernetes pod named envars with environment variables sourced from the pod's metadata and status, follow these steps:

Step-by-Step Instructions
1. Create a YAML Manifest
Here's the YAML configuration tailored to your updated requirements (using the redis:latest image):

apiVersion: v1
kind: Pod
metadata:
  name: envars
spec:
  containers:
  - name: fieldref-container
    image: redis:latest
    command: ["sh", "-c"]
    args:
      - |
        while true; do
            echo -en '\n';
            printenv NODE_NAME POD_NAME;
            printenv POD_IP POD_SERVICE_ACCOUNT;
            sleep 10;
        done;
    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: POD_SERVICE_ACCOUNT
      valueFrom:
        fieldRef:
          fieldPath: spec.serviceAccountName
  restartPolicy: Never

Save this corrected YAML to a file:
vi envars-pod.yaml

Paste the corrected content and save the file.

Apply it:

kubectl apply -f envars-pod.yaml


To check the output of the environment variables inside your pod, follow these steps:

. Exec into the Pod
Run the following command to open a shell session inside the envars pod:

kubectl exec -it envars -- sh

-it allows you to interact with the shell.
-- sh starts a shell session inside the container.

printenv NODE_NAME POD_NAME POD_IP POD_SERVICE_ACCOUNT

This will display the values of the environment variables you defined in the pod spec.


 View All Environment Variables

printenv
