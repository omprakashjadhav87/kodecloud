The Nautilus Application Development team is planning to deploy one of the php-based applications on Kubernetes cluster. As per the recent discussion with DevOps team, they have decided to use nginx and phpfpm. Additionally, they also shared some custom configuration requirements. Below you can find more details. Please complete this task as per requirements mentioned below: 1) Create a service to expose this app, the service type must be NodePort, nodePort should be 30012. 2.) Create a config map named nginx-config for nginx.conf as we want to add some custom settings in nginx.conf. a) Change the default port 80 to 8092 in nginx.conf. b) Change the default document root /usr/share/nginx to /var/www/html in nginx.conf. c) Update the directory index to index index.html index.htm index.php in nginx.conf. 3.) Create a pod named nginx-phpfpm . b) Create a shared volume named shared-files that will be used by both containers (nginx and phpfpm) also it should be a emptyDir volume. c) Map the ConfigMap we declared above as a volume for nginx container. Name the volume as nginx-config-volume, mount path should be /etc/nginx/nginx.conf and subPath should be nginx.conf d) Nginx container should be named as nginx-container and it should use nginx:latest image. PhpFPM container should be named as php-fpm-container and it should use php:8.1-fpm-alpine image. e) The shared volume shared-files should be mounted at /var/www/html location in both containers. Copy /opt/index.php from jump host to the nginx document root inside the nginx container, once done you can access the app using App button on the top bar. Before clicking on finish button always make sure to check if all pods are in running state. You can use any labels as per your choice. Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.


Solutions:- 

‚öôÔ∏è Step 1: Create the ConfigMap (nginx-config)
yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {}

    http {
      server {
        listen 8092;
        root /var/www/html;
        index index.html index.htm index.php;

        location / {
          try_files $uri $uri/ =404;
        }

        location ~ \.php$ {
          include fastcgi_params;
          fastcgi_pass 127.0.0.1:9000;
          fastcgi_index index.php;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }
      }
    }

üß± Step 2: Create the Pod (nginx-phpfpm)

yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-phpfpm
  labels:
    app: php-nginx-app
spec:
  volumes:
    - name: shared-files
      emptyDir: {}
    - name: nginx-config-volume
      configMap:
        name: nginx-config
        items:
          - key: nginx.conf
            path: nginx.conf
  containers:
    - name: nginx-container
      image: nginx:latest
      volumeMounts:
        - name: shared-files
          mountPath: /var/www/html
        - name: nginx-config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
    - name: php-fpm-container
      image: php:8.1-fpm-alpine
      volumeMounts:
        - name: shared-files
          mountPath: /var/www/html


üåê Step 3: Create the Service

yaml

apiVersion: v1
kind: Service
metadata:
  name: nginx-phpfpm-service
spec:
  type: NodePort
  selector:
    app: php-nginx-app
  ports:
    - protocol: TCP
      port: 8092
      targetPort: 8092
      nodePort: 30012

üìÅ Step 4: Copy index.php to Nginx Document Root
Run this command from the jump host to copy the file into the pod:
kubectl cp /opt/index.php nginx-phpfpm:/var/www/html/index.php -c nginx-container

‚úÖ Final Checks
Run the following to verify everything is running:
kubectl get pods
kubectl get svc
