The Nautilus DevOps team is adopting strict naming conventions for all IAM resources using Terraform. Theyâ€™ve asked for help enforcing lowercase, hyphenated names based on inputs 

like project and team. Your task as a DevOps engineer is to complete the following using Terraform: Create an IAM User The user name must be derived using the format project-team-user,

all lowercase, and non-alphanumeric characters (except dashes) replaced with -. Create an IAM Role Use the same naming logic for the role name, ending in -role, and attach an assume role

policy for EC2. Tagging: Both resources must be tagged with: Project: devops Team: dev-team ManagedBy: Terraform Env: dev Additionally, the IAM role should have: RoleType: EC2 Use locals

block within main.tf to: Derive sanitized project/team names Create the resource name prefix Define reusable common tags Create the main.tf file (do not create a separate .tf file) 

to provision the IAM Role & User as per the required values. Use variables.tffile with the following: KKE_PROJECT: name of the project(must be non-empty). 

KKE_TEAM: name of the team (only letters, digits, dashes or underscores) KKE_ENVIRONMENT: name of the environment Use terraform.tfvarsfile to input the values.

Use outputs.tffile to output the following: kke_user_name: name of the created user. kke_role_name: name of the created role. kke_tags_applied: tags applied to the IAM User. 

Notes: The Terraform working directory is /home/bob/terraform. Right-click under the EXPLORER section in VS Code and select Open in Integrated Terminal to launch the terminal. 

Before submitting the task, ensure that terraform plan returns No changes. Your infrastructure matches the configuration.

Solutions:-

main.tf

# The AWS provider block is required to authenticate with AWS.
# If this file is not already present, create a provider.tf file.
# provider "aws" {
#   region = "us-east-1" # Or your desired region
# }

locals {
  # Sanitize the project name: convert to lowercase and replace non-alphanumeric with hyphens
  sanitized_project = lower(replace(var.KKE_PROJECT, "/[^a-z0-9]+/", "-"))

  # Sanitize the team name: convert to lowercase and replace non-alphanumeric with hyphens
  sanitized_team = lower(replace(var.KKE_TEAM, "/[^a-z0-9]+/", "-"))

  # Define the common tags to be applied to both resources
  common_tags = {
    Project   = "devops"
    Team      = "dev-team"
    ManagedBy = "Terraform"
    Env       = var.KKE_ENVIRONMENT
  }

  # Create the resource name prefix using the sanitized project and team names
  resource_name_prefix = "${local.sanitized_project}-${local.sanitized_team}"
}

# IAM User Resource
# Create an IAM user with a name based on the naming convention and common tags
resource "aws_iam_user" "kke_user" {
  name = "${local.resource_name_prefix}-user"
  tags = local.common_tags
}

# EC2 Assume Role Policy Document
# This data source generates the JSON policy required for an EC2 instance to assume a role
data "aws_iam_policy_document" "ec2_assume_role" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

# IAM Role Resource
# Create an IAM role with a name based on the naming convention, an EC2 assume role policy, and extended tags
resource "aws_iam_role" "kke_role" {
  name = "${local.resource_name_prefix}-role"

  assume_role_policy = data.aws_iam_policy_document.ec2_assume_role.json

  tags = merge(local.common_tags, {
    RoleType = "EC2"
  })
}


===========================================

variables.tf

variable "KKE_PROJECT" {
  type        = string
  description = "Name of the project."
  validation {
    condition     = length(var.KKE_PROJECT) > 0
    error_message = "The KKE_PROJECT variable must not be empty."
  }
}

variable "KKE_TEAM" {
  type        = string
  description = "Name of the team."
  validation {
    condition     = can(regex("^[a-zA-Z0-9_-]+$", var.KKE_TEAM))
    error_message = "The KKE_TEAM variable can only contain letters, digits, dashes, or underscores."
  }
}

variable "KKE_ENVIRONMENT" {
  type        = string
  description = "Name of the environment."
}

=================================================================

terraform.tfvars

KKE_PROJECT     = "devops"
KKE_TEAM        = "dev-team"
KKE_ENVIRONMENT = "dev"

================================================================

outputs.tf

output "kke_user_name" {
  description = "The name of the created IAM user."
  value       = aws_iam_user.kke_user.name
}

output "kke_role_name" {
  description = "The name of the created IAM role."
  value       = aws_iam_role.kke_role.name
}

output "kke_tags_applied" {
  description = "The tags applied to the IAM user."
  value       = aws_iam_user.kke_user.tags
}

=================================================================

terraform init
terraform apply
terraform plan
