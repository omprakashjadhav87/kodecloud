The Nautilus DevOps team needs to set up three S3 buckets for different environments with backup and policy configurations. Follow the steps below:

Create three S3 buckets using for_each for environments: Dev, Staging, and Prod.

Name the buckets using the following naming convention:

devops-dev-bucket-27854
devops-staging-bucket-27854
devops-prod-bucket-27854
Add the following tags to each bucket with the corresponding values:

a.) For devops-dev-bucket-27854:

Name = devops-dev-bucket-27854
Environment = Dev
Owner = Alice
b.) For devops-staging-bucket-27854:

Name = devops-staging-bucket-27854
Environment = Staging
Owner = Bob
c.) For devops-prod-bucket-27854:

Environment = Prod
Owner = Carol
For the staging and prod buckets, set Backup = true and add a lifecycle rule with ID MoveToGlacier to transition objects to Glacier after 30 days.

Use the lifecycle block with ignore_changes to protect the tags.

Create a bucket policy that allows public read access to all objects in the bucket.

Use depends_on to ensure the policy is only applied after the bucket has been created.

Implement the entire configuration in a single main.tf file (do not create a separate .tf file) to provision multiple S3 buckets with the specified configurations.

Use variables.tf with the following variable:

KKE_ENV_TAGS. KKE_ENV_TAGS is a map that holds environment-specific metadata such as bucket name, owner, and backup flag.
Use outputs.tf file to output the following:

kke_bucket_names: output the names of the bucket created.

Notes:

The Terraform working directory is /home/bob/terraform.

Right-click under the EXPLORER section in VS Code and select Open in Integrated Terminal to launch the terminal.

Before submitting the task, ensure that terraform plan returns No changes. Your infrastructure matches the configuration.

Solutions:-

📁 File: /home/bob/terraform/variables.tf

variable "KKE_ENV_TAGS" {
  type = map(object({
    bucket_name = string
    environment = string
    owner       = string
    backup      = bool
  }))
  default = {
    dev = {
      bucket_name = "devops-dev-bucket-27854"
      environment = "Dev"
      owner       = "Alice"
      backup      = false
    }
    staging = {
      bucket_name = "devops-staging-bucket-27854"
      environment = "Staging"
      owner       = "Bob"
      backup      = true
    }
    prod = {
      bucket_name = "devops-prod-bucket-27854"
      environment = "Prod"
      owner       = "Carol"
      backup      = true
    }
  }
}

==========================================================

main.tf

provider "aws" {
  region = "us-east-1"
}

resource "aws_s3_bucket" "kke_buckets" {
  for_each = var.KKE_ENV_TAGS

  bucket = each.value.bucket_name

  tags = {
    Name        = each.value.bucket_name
    Environment = each.value.environment
    Owner       = each.value.owner
    Backup      = each.value.backup ? "true" : "false"
  }

  lifecycle {
    ignore_changes = [tags]
  }
}

resource "aws_s3_bucket_lifecycle_configuration" "glacier_rules" {
  for_each = {
    for key, value in var.KKE_ENV_TAGS : key => value
    if value.backup
  }

  bucket = aws_s3_bucket.kke_buckets[each.key].id

  rule {
    id     = "MoveToGlacier"
    status = "Enabled"

    transition {
      days          = 30
      storage_class = "GLACIER"
    }

    filter {}
  }
}

resource "aws_s3_bucket_policy" "public_read_policy" {
  for_each = var.KKE_ENV_TAGS

  bucket = aws_s3_bucket.kke_buckets[each.key].id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "PublicReadGetObject"
        Effect    = "Allow"
        Principal = "*"
        Action    = ["s3:GetObject"]
        Resource  = "${aws_s3_bucket.kke_buckets[each.key].arn}/*"
      }
    ]
  })

  depends_on = [aws_s3_bucket.kke_buckets]
}

============================================================================

outputs.tf

output "kke_bucket_names" {
  value = [for b in aws_s3_bucket.kke_buckets : b.bucket]
}

===================================================================

✅ Final Steps

terraform init
terraform plan
terraform apply
