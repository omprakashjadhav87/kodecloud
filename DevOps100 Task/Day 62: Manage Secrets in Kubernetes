The Nautilus DevOps team is working to deploy some tools in Kubernetes cluster. Some of the tools are licence based so that licence information needs to be stored securely within
Kubernetes cluster. Therefore, the team wants to utilize Kubernetes secrets to store those secrets. Below you can find more details about the requirements:

We already have a secret key file blog.txt under /opt location on jump host. Create a generic secret named blog, it should contain the password/license-number present in blog.txt file.
Also create a pod named secret-xfusion.
Configure pod's spec as container name should be secret-container-xfusion, image should be debian with latest tag (remember to mention the tag with image). Use sleep command for container
so that it remains in running state. Consume the created secret and mount it under /opt/cluster within the container.
To verify you can exec into the container secret-container-xfusion, to check the secret key under the mounted path /opt/cluster. Before hitting the Check button please make sure pod/pods are in running state, also validation can take some time to complete so keep patience.
Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

Solutions:-

✅ Step 1: Create the Kubernetes Secret
Assuming blog.txt contains the license key or password, run the following command on the jump host:


kubectl create secret generic blog --from-file=/opt/blog.txt
This creates a secret named blog with the contents of blog.txt stored securely.

✅ Step 2: Define the Pod Manifest
Create a file named secret-xfusion-pod.yaml with the following content:

yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-xfusion
spec:
  containers:
  - name: secret-container-xfusion
    image: debian:latest
    command: ["sleep", "3600"]
    volumeMounts:
    - name: secret-volume
      mountPath: /opt/cluster
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: blog


✅ Step 3: Apply the Pod Manifest
Run this command to deploy the pod:
kubectl apply -f secret-xfusion-pod.yaml

✅ Step 4: Verify the Secret Mount
Once the pod is running, exec into the container:
kubectl exec -it secret-xfusion -- bash

Inside the container, check the mounted secret:
cat /opt/cluster/blog.txt

You should see the license/password content from the original blog.txt.
