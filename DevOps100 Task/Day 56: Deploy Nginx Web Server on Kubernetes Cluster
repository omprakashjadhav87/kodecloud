Some of the Nautilus team developers are developing a static website and they want to deploy it on Kubernetes cluster. They want it to be highly available and scalable. Therefore, based
on the requirements, the DevOps team has decided to create a deployment for it with multiple replicas. Below you can find more details about it:
Create a deployment using nginx image with latest tag only and remember to mention the tag i.e nginx:latest. Name it as nginx-deployment. The container should be named as nginx-container, also make sure replica counts are 3.
Create a NodePort type service named nginx-service. The nodePort should be 30011.
Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

solutions:-

Step 1: Create the Deployment
This deployment uses the nginx:latest image, sets the container name, and runs 3 replicas.

yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx:latest
        ports:
        - containerPort: 80

Apply it:
kubectl apply -f nginx-deployment.yaml

üåê Step 2: Create the NodePort Service
This exposes the Nginx deployment on port 30011 across all cluster nodes.

yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30011

Apply it:
kubectl apply -f nginx-service.yaml

‚úÖ Step 3: Verify Everything
Check pods:
kubectl get pods -l app=nginx

Check service:
kubectl get svc nginx-service

Access the site via any node‚Äôs IP:
curl http://<Node-IP>:30011
