To enable secure retrieval of secrets, the Nautilus DevOps team needs to configure access to a secret in AWS Secrets Manager using IAM roles and policies. The objective is to allow EC2 instances 
to retrieve secrets securely. Please complete the following tasks:

Create a secret in AWS Secrets Manager named xfusion-app-secret with the following secret string:

{"db_user":"admin","db_pass":"supersecret"}

Create an IAM role named xfusion-app-role with EC2 as the trusted entity.

Attach an inline IAM policy named xfusion-app-policy that grants permission to retrieve the secret from AWS Secrets Manager.

Use the main.tf file (do not create a separate .tf file) to provision the IAM Role and IAM Policy.

Create the variables.tf file, ensure the following variables are defined in variables.tf file:

KKE_SECRET_NAME for the secret name.
KKE_SECRET_VALUE for the secret value.
KKE_ROLE_NAME for the IAM role name.
KKE_POLICY_NAME for the IAM policy name.
Create the outputs.tf file, and use the following:

KKE_secret_name: The secret name
KKE_role_name: The IAM role name
KKE_policy_name: The IAM policy name

Notes:

The Terraform working directory is /home/bob/terraform.

Right-click under the EXPLORER section in VS Code and select Open in Integrated Terminal to launch the terminal.

Before submitting the task, ensure that terraform plan returns No changes. Your infrastructure matches the configuration.

Solutions:-

complete the Terraform setup for secure EC2 access to AWS Secrets Manager using IAM roles and policies â€” all within /home/bob/terraform:

variables.tf

variable "KKE_SECRET_NAME" {
  description = "Name of the secret"
  type        = string
  default     = "xfusion-app-secret"
}

variable "KKE_SECRET_VALUE" {
  description = "Secret string value"
  type        = string
  default     = "{\"db_user\":\"admin\",\"db_pass\":\"supersecret\"}"
}

variable "KKE_ROLE_NAME" {
  description = "IAM role name"
  type        = string
  default     = "xfusion-app-role"
}

variable "KKE_POLICY_NAME" {
  description = "IAM policy name"
  type        = string
  default     = "xfusion-app-policy"
}

==============================================

ðŸ“„ main.tf

Provision the secret, IAM role, and inline policy:

provider "aws" {
  region = "us-east-1"
}

resource "aws_secretsmanager_secret" "app_secret" {
  name = var.KKE_SECRET_NAME
}

resource "aws_secretsmanager_secret_version" "app_secret_value" {
  secret_id     = aws_secretsmanager_secret.app_secret.id
  secret_string = var.KKE_SECRET_VALUE
}

resource "aws_iam_role" "app_role" {
  name = var.KKE_ROLE_NAME

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Principal = {
        Service = "ec2.amazonaws.com"
      },
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy" "app_policy" {
  name   = var.KKE_POLICY_NAME
  role   = aws_iam_role.app_role.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect = "Allow",
      Action = [
        "secretsmanager:GetSecretValue"
      ],
      Resource = aws_secretsmanager_secret.app_secret.arn
    }]
  })
}


====================================================================

ðŸ“¤ outputs.tf

Expose the required outputs:

output "KKE_secret_name" {
  value = var.KKE_SECRET_NAME
}

output "KKE_role_name" {
  value = var.KKE_ROLE_NAME
}

output "KKE_policy_name" {
  value = var.KKE_POLICY_NAME
}

===================================================================

âœ… Final Steps
cd /home/bob/terraform
terraform init
terraform apply


Then verify:

terraform plan

You should see: No changes. Your infrastructure matches the configuration.
