As part of a data migration project, the team lead has tasked the team with migrating data from an existing S3 bucket to a new S3 bucket. The existing bucket contains a substantial amount of data that 
must be accurately transferred to the new bucket. The team is responsible for creating the new S3 bucket using Terraform and ensuring that all data from the existing bucket is copied or
synced to the new bucket completely and accurately. It is imperative to perform thorough verification steps to confirm that all data has been successfully transferred to the new bucket without
any loss or corruption. As a member of the Nautilus DevOps Team, your task is to perform the following using Terraform: Create a New Private S3 Bucket: Name the bucket nautilus-sync-25369 and store
this bucket name in a variable named KKE_BUCKET. Data Migration: Migrate all data from the existing nautilus-s3-20539 bucket to the new nautilus-sync-25369 bucket. Ensure Data Consistency: 
Ensure that both buckets contain the same data after migration. Update the main.tf file (do not create a separate .tf file) to provision a new private S3 bucket and migrate the data. Use the variables.tf 
file with the following variable: KKE_BUCKET: The name for the new bucket created. Use the outputs.tf file with the following outputs: new_kke_bucket_name: The name of the new bucket created. 
new_kke_bucket_acl: The ACL of the new bucket created. Notes: The Terraform working directory is /home/bob/terraform. Right-click under the EXPLORER section in VS Code and select Open in Integrated Terminal 
to launch the terminal. Before submitting the task, ensure that terraform plan returns No changes. Your infrastructure matches the configuration.

Solutions:-

main.tf

resource "aws_s3_bucket" "wordpress_bucket" {
  bucket = "nautilus-s3-20539"
}

resource "aws_s3_bucket_acl" "wordpress_bucket_acl" {
  bucket = aws_s3_bucket.wordpress_bucket.id
  acl    = "private"
}


# New bucket
resource "aws_s3_bucket" "nautilus_sync_25369" {
  bucket = var.KKE_BUCKET

  tags = {
    Name        = var.KKE_BUCKET
    Environment = "DevOps"
  }
}

resource "aws_s3_bucket_acl" "nautilus_sync_25369_acl" {
  bucket = aws_s3_bucket.nautilus_sync_25369.id
  acl    = "private"
}

# Sync data with retry and wait logic
resource "null_resource" "s3_data_sync" {
  provisioner "local-exec" {
    command = <<EOT
      for i in {1..10}; do
        aws s3api head-bucket --bucket nautilus-s3-20539 2>/dev/null && \
        aws s3api head-bucket --bucket ${var.KKE_BUCKET} 2>/dev/null && break
        echo "Waiting for buckets to become available..."
        sleep 5
      done

      for i in {1..5}; do
        aws s3 sync s3://nautilus-s3-20539 s3://${var.KKE_BUCKET} --exact-timestamps --region us-east-1 && break
        echo "Sync attempt $i failed. Retrying..."
        sleep 5
      done
    EOT
    interpreter = ["/bin/bash", "-c"]
  }

  depends_on = [
    aws_s3_bucket.nautilus_sync_25369,
    aws_s3_bucket_acl.nautilus_sync_25369_acl
  ]
}

---------------------

outputs.tf

output "new_kke_bucket_name" {
  value = aws_s3_bucket.nautilus_sync_25369.id
}

output "new_kke_bucket_acl" {
  value = aws_s3_bucket_acl.nautilus_sync_25369_acl.acl
}

--------------------------------------------------------------

âœ… variables.tf

variable "KKE_BUCKET" {
  description = "The name for the new S3 bucket"
  type        = string
  default     = "nautilus-sync-25369"
}

----------------------------------------------

ðŸ§ª Final Checklist
Run terraform apply and confirm success.

Run terraform plan and confirm:
